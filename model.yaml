name: Build Model
description: Instantiates a model using create_model from the NeSy-Factory-Models GitHub repo, updates config with weights, and saves both model and updated config.

inputs:
  - { name: model_config_path, type: String, description: "Path to the model config file" }
  - { name: model_name, type: String, description: "Name of the model to instantiate (e.g., tgcn, ffnetwork)" }
  - { name: model_config_name, type: String, description: "Name of the model config to instantiate (e.g., tgcn, ffnetwork)" }

outputs:
  - { name: model_out, type: Model, description: "Model weights (torch saved state_dict)" }
  - { name: config_updated, type: String, description: "Updated config as JSON string" }

implementation:
  container:
    image: nikhilv215/nesy-factory:v2
    command:
      - sh
      - -c
      - |
        # PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet pip --upgrade

        # python3 -m pip install --quiet torch==2.0.1+cu118 torchvision==0.15.2+cu118 torchaudio==2.0.2+cu118 -f https://download.pytorch.org/whl/torch_stable.html

        # python3 -m pip install --quiet torch-scatter torch-sparse torch-cluster torch-spline-conv -f https://data.pyg.org/whl/torch-2.0.1+cu118.html

        # python3 -m pip install --quiet scikit-learn

        # python3 -m pip install --quiet \
        #   "git+https://naga-mobius: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@github.com/gaiangroup/NeSy-Factory-Models.git#egg=nesy-factory-models[geometric,temporal]"

        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import torch
        import argparse
        import json
        import os

        from nesy_factory.GNNs import create_model

        parser = argparse.ArgumentParser()
        parser.add_argument('--model_config_path', type=str, required=True)
        parser.add_argument('--model_config_name', type=str, required=True)
        parser.add_argument('--model_name', type=str, required=True)
        parser.add_argument('--model_out', type=str, required=True)
        parser.add_argument('--config_updated', type=str, required=True)  # String output path
        args = parser.parse_args()

        # Instantiate model
        # model = create_model(args.model_name, config)
        model = create_model_from_config(args.model_name, args.model_config_name, args.model_config_path)
        print("Model created successfully.")
        print(model)

        # Ensure output dirs
        os.makedirs(os.path.dirname(args.model_out), exist_ok=True)
        os.makedirs(os.path.dirname(args.config_updated), exist_ok=True)

        # Save model state_dict
        torch.save(model.state_dict(), args.model_out)

        # Save updated config as a string
        config_str_out = json.dumps(config, indent=2)
        with open(args.config_updated, "w") as f:
            f.write(config_str_out)

        print(f"Model saved to {args.model_out}")
        print(f"Updated config string saved to {args.config_updated}")
    args:
      - --model_config_path
      - {inputValue: model_config_path}
      - --model_config_name
      - {inputValue: model_config_name}
      - --model_name
      - {inputValue: model_name}
      - --model_out
      - {outputPath: model_out}
      - --config_updated
      - {outputPath: config_updated}
